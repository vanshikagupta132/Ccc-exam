#include <iostream>
#include <vector>
#include <algorithm>

double findMedianSortedArrays(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    int m = nums1.size();
    int n = nums2.size();

    if (m > n) {
        return findMedianSortedArrays(nums2, nums1);
    }

    int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;

    while (iMin <= iMax) {
        int i = (iMin + iMax) / 2;
        int j = halfLen - i;

        if (i < m && nums2[j - 1] > nums1[i]) {
            iMin = i + 1;
        } else if (i > 0 && nums1[i - 1] > nums2[j]) {
            iMax = i - 1;
        } else {
            int maxOfLeft;
            if (i == 0) {
                maxOfLeft = nums2[j - 1];
            } else if (j == 0) {
                maxOfLeft = nums1[i - 1];
            } else {
                maxOfLeft = std::max(nums1[i - 1], nums2[j - 1]);
            }

            if ((m + n) % 2 == 1) {
                return maxOfLeft;
            }

            int minOfRight;
            if (i == m) {
                minOfRight = nums2[j];
            } else if (j == n) {
                minOfRight = nums1[i];
            } else {
                minOfRight = std::min(nums1[i], nums2[j]);
            }

            return (maxOfLeft + minOfRight) / 2.0;
        }
    }

    return 0.0; // Should not reach this point.
}

int main() {
    int n, m;
    std::cin >> n >> m;
    
    std::vector<int> nums1(n);
    std::vector<int> nums2(m);

    for (int i = 0; i < n; ++i) {
        std::cin >> nums1[i];
    }

    for (int i = 0; i < m; ++i) {
        std::cin >> nums2[i];
    }

    double result = findMedianSortedArrays(nums1, nums2);
    std::cout << result << std::endl;

    return 0;
}
